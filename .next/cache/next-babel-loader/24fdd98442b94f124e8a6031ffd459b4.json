{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useRef, useEffect, useState } from \"react\";\nimport style from \"./funnyText.module.css\";\nimport classNames from \"classnames\";\n\nconst toText = symbol => {\n  return {\n    symbol,\n    fontsize: \"5vh\"\n  };\n};\n\nconst FunnyText = ({\n  text\n}) => {\n  const textArray = [\"R\", \"A\"].map(toText);\n  const {\n    0: symbols,\n    1: setSymbols\n  } = useState(textArray);\n  const {\n    0: currentIndex,\n    1: setCurrentIndex\n  } = useState(0);\n  useInterval(function () {\n    if (currentIndex <= textArray.length) {\n      setCurrentIndex(currentIndex + 1);\n    } else {\n      setCurrentIndex(0);\n    }\n  }, 200, textArray.length + 1);\n\n  const defaultText = () => {\n    const newSymbols = symbols.map((s, i) => {\n      return _objectSpread({}, s, {\n        fontsize: \"5vh\"\n      });\n    });\n    setSymbols(newSymbols);\n  };\n\n  const enlargeFont = (symbol, index) => {\n    console.log(index);\n    const newSymbols = symbols.map((s, i) => {\n      if (i === index) {\n        return _objectSpread({}, s, {\n          fontsize: \"10vh\"\n        });\n      }\n\n      if (i === index - 1 || i === index + 1) {\n        return _objectSpread({}, s, {\n          fontsize: \"7vh\"\n        });\n      }\n\n      return _objectSpread({}, s, {\n        fontsize: \"5vh\"\n      });\n    });\n    setSymbols(newSymbols);\n  };\n\n  return __jsx(\"div\", {\n    className: style.basic,\n    onMouseOut: defaultText\n  }, symbols.map((symbol, index) => {\n    const currentStyle = classNames({\n      [style.show]: index < currentIndex,\n      [style.hide]: index >= currentIndex\n    });\n    const divStyle = {\n      fontSize: symbol.fontsize\n    };\n    return __jsx(\"div\", {\n      onMouseOver: () => enlargeFont(symbol, index),\n      key: index,\n      style: divStyle,\n      className: classNames(currentStyle)\n    }, index < currentIndex ? symbol.symbol : \"\");\n  }));\n};\n\nfunction useInterval(callback, delay, numberOfTicks = 100) {\n  const savedCallback = useRef();\n  const {\n    0: ticks,\n    1: setTicks\n  } = useState(0);\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]); // Set up the interval.\n\n  useEffect(() => {\n    function tick() {\n      setTicks(ticks + 1);\n      savedCallback.current();\n    }\n\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n\n      if (ticks === numberOfTicks) {\n        clearInterval(id);\n      }\n\n      return () => clearInterval(id);\n    }\n  }, [delay, ticks]);\n}\n\nexport default FunnyText;","map":null,"metadata":{},"sourceType":"module"}