{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useRef, useEffect, useState } from \"react\";\nimport style from \"./funnyText.module.css\";\nimport classNames from \"classnames\";\n\nvar toText = function toText(symbol) {\n  return {\n    symbol: symbol,\n    fontsize: \"5vh\"\n  };\n};\n\nvar FunnyText = function FunnyText(_ref) {\n  var text = _ref.text;\n  var textArray = text.split(\"\").map(toText);\n\n  var _useState = useState(textArray),\n      symbols = _useState[0],\n      setSymbols = _useState[1];\n\n  var _useState2 = useState(0),\n      currentIndex = _useState2[0],\n      setCurrentIndex = _useState2[1];\n\n  useInterval(function () {\n    if (currentIndex <= textArray.length) {\n      setCurrentIndex(currentIndex + 1);\n    } else {\n      setCurrentIndex(0);\n    }\n  }, 200, textArray.length + 1);\n\n  var defaultText = function defaultText() {\n    var newSymbols = symbols.map(function (s, i) {\n      return _objectSpread({}, s, {\n        fontsize: \"5vh\"\n      });\n    });\n    setSymbols(newSymbols);\n  };\n\n  var enlargeFont = function enlargeFont(symbol, index) {\n    console.log(index);\n    var newSymbols = symbols.map(function (s, i) {\n      if (i === index) {\n        return _objectSpread({}, s, {\n          fontsize: \"10vh\"\n        });\n      }\n\n      if (i === index - 1 || i === index + 1) {\n        return _objectSpread({}, s, {\n          fontsize: \"7vh\"\n        });\n      }\n\n      return _objectSpread({}, s, {\n        fontsize: \"5vh\"\n      });\n    });\n    setSymbols(newSymbols);\n  };\n\n  return __jsx(\"div\", {\n    className: style.basic,\n    onMouseOut: defaultText\n  }, symbols.map(function (symbol, index) {\n    var _classNames;\n\n    var currentStyle = classNames((_classNames = {}, _defineProperty(_classNames, style.show, index < currentIndex), _defineProperty(_classNames, style.hide, index >= currentIndex), _classNames));\n    var divStyle = {\n      fontSize: symbol.fontsize\n    };\n    return __jsx(\"div\", {\n      onMouseOver: function onMouseOver() {\n        return enlargeFont(symbol, index);\n      },\n      key: index,\n      style: divStyle,\n      className: classNames(currentStyle)\n    }, index < currentIndex ? symbol.symbol : \"\");\n  }));\n};\n\nfunction useInterval(callback, delay) {\n  var numberOfTicks = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 100;\n  var savedCallback = useRef();\n\n  var _useState3 = useState(0),\n      ticks = _useState3[0],\n      setTicks = _useState3[1];\n\n  useEffect(function () {\n    savedCallback.current = callback;\n  }, [callback]); // Set up the interval.\n\n  useEffect(function () {\n    function tick() {\n      setTicks(ticks + 1);\n      savedCallback.current();\n    }\n\n    if (delay !== null) {\n      var id = setInterval(tick, delay);\n\n      if (ticks === numberOfTicks) {\n        clearInterval(id);\n      }\n\n      return function () {\n        return clearInterval(id);\n      };\n    }\n  }, [delay, ticks]);\n}\n\nexport default FunnyText;","map":null,"metadata":{},"sourceType":"module"}